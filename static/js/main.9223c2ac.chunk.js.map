{"version":3,"sources":["components/NumberOfGuests.js","components/Budget.js","components/ListOfItems.js","components/ItemCart.js","App.js","serviceWorker.js","index.js"],"names":["NumberOfGuests","this","props","numberOfGuests","Component","Budget","budget","ListOfItems","partyList","map","item","index","key","partyitem","price","className","onClick","handleChangeCart","ItemCart","class","cart","App","handleChangeGuest","e","setState","userGuestInput","target","value","handleChangeBudget","userBudgetInput","currentItem","state","console","log","reset","type","placeholder","textarea","cols","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9223c2ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NumberOfGuests extends Component {\n    render() {\n        return (\n            <div>\n                {/* Displays number of guests based on what you type into the input box in app.js. */}\n                <h3>Total Number Of Guests: {this.props.numberOfGuests}</h3>\n            </div>\n        )\n    }\n}\n\nexport default NumberOfGuests;\n","import React, { Component } from 'react';\n\nclass Budget extends Component {\n    render() {\n        return (\n            <>\n                <div>\n                    <h3>Your Total Budget: ${this.props.budget}</h3>\n                 </div>\n            </>\n        )\n    }\n}\n\nexport default Budget;\n","import React, { Component } from 'react';\n\nclass ListOfItems extends Component {\n    render() {\n        return (\n            <>\n                <h3>Party Supplies</h3>\n                <h3>List Of Items You Can Buy</h3>\n                 {/* Create an unordered list of items. The items are mapped from the party list prop. Goes through each item in the party list and puts them into a list tag. There is a button implemented for each item to add that item to the cart.Only adds the name of the item.*/}\n                <ul>\n                    {this.props.partyList.map((item, index) => {\n                        return (\n                            <div key={index}>\n                                <li>{item.partyitem} {item.price} </li>\n                                <button className=\"cartButton\" onClick={() => { this.props.handleChangeCart(item.partyitem) }}>Add to Cart</button>\n\n                            </div>\n                        )\n                    })}\n                </ul>\n            </>\n        )\n    }\n}\n\nexport default ListOfItems;\n","import React, { Component } from 'react';\n\nclass ItemCart extends Component {\n    render() {\n        return (\n            <>\n                <div class=\"itemCart\">\n                <h3>Cart</h3>\n                <h5>Total Price ${this.props.price}</h5>\n                <ul>\n                    {/* Unordered list to map over the items we placed into the cart array. Places each mapped item into a list to be displayed.*/}\n                    {this.props.cart.map((item, index) => {\n                        return (\n                            < li key={index} > { item}</li>\n                        )\n\n                    })}\n                </ul>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default ItemCart;\n","//Deconstruct Component and import all files necessary for app functionality.\nimport React, { Component } from 'react';\nimport './App.css';\nimport NumberOfGuests from './components/NumberOfGuests';\nimport Budget from './components/Budget';\nimport ListOfItems from './components/ListOfItems';\nimport ItemCart from './components/ItemCart';\n\n\n//Create class app.\nclass App extends Component {\n  //Create constructor with props.\n  constructor(props) {\n    super(props)\n    //Create state that has 5 different state objects.\n    this.state = {\n      userGuestInput: \"\",\n      userBudgetInput: \"\",\n      partyList: [\n        { partyitem: \"1 Balloon\", price: \"$1\" },\n        { partyitem: \"1 Streamer\", price: \"$3\" },\n        { partyitem: \"1 Cake\", price: \"$30\" },\n        { partyitem: \"1 Party Hat\", price: \"$1\" },\n        { partyitem: \"1 Confetti Cannon\", price: \"$6\" }\n      ],\n      cart: [],\n      price: 0,\n    }\n  }\n\n  //This method is to set the state of the user input for # of guests and display it on the webpage.\n  handleChangeGuest = (e) => {\n    this.setState({ userGuestInput: e.target.value })\n  }\n  \n  //This method is to set the state of the user input for their budget and display it on the webpage.\n  handleChangeBudget = (e) => {\n    this.setState({ userBudgetInput: e.target.value })\n  }\n\n  //This method sums all the integers based on which item you add to your cart and sets the state to that summed number. Also sets the cart to hold an array of all the items you placed into your cart.\n  handleChangeCart = (currentItem) => {\n    let { cart } = this.state\n    let { price } = this.state\n\n    if (currentItem === \"1 Balloon\") {\n      price += 1\n      this.setState({ price: price })\n    }\n    else if (currentItem === \"1 Streamer\") {\n      price += 3\n      this.setState({ price: price })\n    }\n    else if (currentItem === \"1 Cake\") {\n      price += 30\n      this.setState({ price: price })\n    }\n    else if (currentItem === \"1 Party Hat\") {\n      price += 1\n      this.setState({ price: price })\n    }\n    else if (currentItem === \"1 Confetti Cannon\") {\n      price += 6\n      this.setState({ price: price })\n    }\n    this.setState({ cart: [...cart, currentItem] })\n    console.log(cart)\n  }\n\n  //Reset method is used to set cart and price back to nothing. This way, the information displayed on the webpage for cart will be empty.\n  reset = () => {\n    let { cart } = this.state\n    let { price } = this.state\n    cart = []\n    price = 0\n    this.setState({ cart: cart })\n    this.setState({ price: price })\n    console.log(cart);\n  }\n\n  //Render method is all the info we are displaying on the webpage.\n  render() {\n    return (\n      <>\n        <div className=\"header\">\n          <h1>Party Planner Buddy</h1>\n          <p>Welcome to The Party Planner Buddy app in the field below, please enter the number of guests in your upcoming party. Then, select a range out of the price options provided. Once you have done this and click submit a list of our party items will generate. As you shop and click on items you wish to to add to your shopping list, the shopping list will generate on the right hand side with your total price\n          </p>\n        </div>\n        <div>\n          <div className=\"guests\">\n            {/* Created an input box for # of guests that takes in an integer and will display what you type in. */}\n            <h3>Please enter the size of your party below</h3>\n            <input\n              type=\"number\"\n              placeholder=\"Enter # of guests\"\n              textarea cols=\"30\"\n              value={this.state.userGuestInput}\n              onChange={this.handleChangeGuest}\n            />\n            {/* Prop for the class NumberOfGuests so that file has access to App.js methods */}\n            <NumberOfGuests\n              numberOfGuests={this.state.userGuestInput}\n            />\n          </div>\n          {/* Created an input box for budget that takes in an integer and will display what you type in. */}\n          <div className=\"budget\">\n            <h3>Now enter your party's budget</h3>\n            <input\n              type=\"number\"\n              placeholder=\"Enter budget\"\n              textarea cols=\"30\"\n              value={this.state.userBudgetInput}\n              onChange={this.handleChangeBudget}\n            />\n            {/* Prop for the Budget class so that file has access to App.js methods */}\n            <Budget\n              budget={this.state.userBudgetInput}\n            />\n          </div>\n          <div className=\"row\">\n            <div className=\"column\">\n              {/* Prop for the ListOfItems class so that file has access to App.js methods */}\n              <ListOfItems\n              partyList={this.state.partyList}\n              handleChangeCart={this.handleChangeCart}\n              />\n            </div>\n            <div className=\"column\">\n                 {/* Prop for the ItemCart class so that file has access to App.js methods */}\n              <ItemCart\n              price={this.state.price}\n              cart={this.state.cart}\n              />\n               {/* HTML for the reset button */}\n              <button className=\"emptyCart\" onClick={this.reset}>Empty Cart</button>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}